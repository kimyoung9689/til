### 1. 음절 (Syllable)

**음절**은 사람이 한 번에 소리 낼 수 있는 최소의 소리 덩어리
예를 들어, '바나나'는 '바', '나', '나' 세 개의 음절로 이루어져 있다. 

음절은 글자 수와 비슷하지만, 글자와 완전히 같지는 않다.

### 2. 형태소 (Morpheme)

**형태소**는 의미를 가진 가장 작은 말의 단위. 

더 이상 쪼개면 의미를 잃게 된다. 형태소는 크게 두 가지로 나뉘는데

- **자립 형태소:** 하늘, 가방, 책처럼 혼자서도 의미를 가지는 형태소. 주로 명사, 동사, 형용사, 부사 등이 속함
- **의존 형태소:** '을', '는', '다', '았'처럼 혼자서는 의미가 없고 다른 형태소와 결합해야만 의미를 나타낼 수 있는 형태소. 조사를 비롯해 동사/형용사의 어미, 접사 등이 여기에 속함

예시로 '하늘을 나는 새'를 보면

- **하늘:** 자립 형태소
- **을:** 의존 형태소 (조사)
- **날-:** 의존 형태소 (어간)
- **는:** 의존 형태소 (어미)
- **새:** 자립 형태소

---

### 3. 어절 (Phrase)

**어절**은 문장을 구성하는 각각의 마디로, 띄어쓰기 단위와 같다고 보면 됨

문장 성분 하나하나를 의미, 단어들이 모여서 하나의 의미 덩어리를 이루는 최소의 단위

예) '나는 밥을 먹었다.'는 세 개의 어절로 이루어져 있다.

- **나는**
- **밥을**
- **먹었다**

---

### 4. 품사 (Part-of-speech)

**품사**는 단어를 기능, 의미, 형태에 따라 분류한 갈래.

한국어에는 명사, 대명사, 수사, 동사, 형용사, 관형사, 부사, 조사, 감탄사 등 아홉 가지 품사가 있고 

전산언어학에서는 텍스트를 분석할 때 단어에 품사 태그를 붙여서 단어의 역할을 파악하는 **품사 태깅**이라는 작업을 진행

예시'나는 밥을 먹었다'를 보면,

- **나:** 대명사
- **는:** 조사
- **밥:** 명사
- **을:** 조사
- **먹다:** 동사
- **었-:** 선어말 어미
- **다:** 종결 어미

이 용어들은 텍스트를 분석하고 컴퓨터가 언어를 이해하게 만드는 전산언어학의 기본 개념

---

### 전통적인 NLP 파이프라인

1. **Pre-process (전처리):** 텍스트 데이터를 정제하고 표준화하는 첫 번째 단계
2. **Tokenizer (토큰화):** 문장이나 텍스트를 단어나 구와 같은 더 작은 단위인 **토큰**으로 나눔
3. **Part of speech tagger (품사 태깅):** 각 토큰의 품사(명사, 동사, 형용사 등)를 식별. **CRF** 모델과 같은 통계적 방법 주로 사용
4. **Chunker (구문 분석):** 토큰들을 의미 있는 구(명사구, 동사구 등)로 묶기
5. **Class matching & Querying (클래스 매칭 및 질의):** 처리된 텍스트에서 특정 정보를 추출하고 질의를 통해 원하는 데이터 찾기. NER과 같은 기술 사용. 최근에는 **BERT**와 같은 최신 딥러닝 모델들이 NER 성능을 향상시키는 데 활용
6. **Post-process (후처리):** 추출된 데이터를 최종적으로 정리하고 가공

---

### 파이프라인 구성 요소

- **Linguamatics NLP Pipeline**: 파이프라인의 전체적인 구조를 나타냄
- **NLP Processing**: 실제 언어 처리 작업이 이루어지는 핵심 부분
- **Internal API**: 각 처리 단계에 필요한 기능들을 **API**형태로 제공
- **NLP Connector**: 외부 시스템이나 응용 프로그램과 NLP 파이프라인을 연결하는 역할

요즘에는 딥러닝 기술이 발전하면서 이것과는 다른 방식의 파이프라인이 많이 쓰임

**현대적인 딥러닝 기반 파이프라인**은 BERT나 GPT 같은 하나의 거대한 모델이 

대부분의 작업을 한 번에 처리하는 경우가 많다.

---

### 언어의 구성요소

언어는 크게

**형태**, **내용**, **사용** 세 가지로 구성

이 세 가지를 연구하는 다양한 분야가 언어학의 하위 분야

---

### 형태

언어의 물리적인 표현 방법. 형태소와 단어, 문장 같은 구조를 연구

- **음운론 (Phonology)**
    - 언어의 가장 작은 단위인 **말소리**를 연구
    - 어떤 소리가 있고, 그 소리들이 어떻게 결합하고 변하는지 규칙을 분석                                                 예) 한국어에서 '물'과 '불'이 의미가 다른 것처럼 말소리 하나로 뜻이 달라지는 현상을 다룸
- **형태론 (Morphology)**
    - 단어나 형태소처럼 언어에서 의미를 갖는 가장 작은 단위를 연구                                                          예) 'talks'를 'talk'와 '-s'로 나누는 것처럼 단어가 어떻게 만들어졌고 어떤 문법적 기능을 하는지 분석
    - **형태소**: 의미나 문법적 기능을 가진 최소 단위
    - **이형태**: 같은 형태소라도 환경에 따라 모양이 달라지는 것.                                                                      예) 영어 복수형 '-s'가 'cars'에서는 '-s'로, 'buses'에서는 '-es'로 바뀌는 것
- **통사론 (Syntax)**
    - 단어를 합쳐서 구나 문장을 만드는 규칙을 연구                                                                                         문장의 올바른 순서를 정하고 , 단어 배열이 바뀌면 의미가 어떻게 변하는지 분석
    - **심층 구조와 표층 구조**: 심층 구조는 화자가 말하려는 추상적인 의미,                                                       표층 구조는 실제로 사용되는 문장 구조. "찰리가 창문을 깼다"와 "창문이 찰리에 의해 깨졌다"는 표층 구조는 다르지만 심층 구조는 같다고 할 수 있다.
    - **구조적 모호성**: 하나의 문장이 여러 가지로 해석될 수 있는 경우
    

---

### 내용

언어가 의미하는 실제 의미

- **의미론 (Semantics)**
    - 단어나 문장의 일반적인 의미를 연구
    - **의미 자질**: 단어의 의미를 '사람', '남자', '살아있는' 같은 자질들의 조합으로 표현
    - **동음이의어/다의어**: '배'처럼 형태는 같지만 전혀 다른 의미를 가진 단어를 동음이의어라고 하고, '손'처럼 의미가 서로 관련되어 확장된 단어를 다의어라고 함
    - 연어 : 특정 단어들이 다른 단어들과 함께 습관적으로 사용되는 현상
    

---

### 사용

언어를 사용하는 상황이나 문맥. 대화 속에서 숨겨진 의미나 문장들의 연결 관계를 파악하는 분야

- **화용론 (Pragmatics)**
    - 언어가 사용되는 **상황**이나 **문맥**에 따라 숨겨진 의미를 파악하는 분야
    - **직시 표현**: '나', '너', '여기', '저기', '어제'처럼 문맥에 따라 의미가 달라지는 표현
    - **전제**: 말하기 전에 화자나 청자가 이미 알고 있다고 가정하는 사실을 의미. 예) "당신 오빠가 밖에서 기다리고 있어요"라고 말하면, 듣는 사람에게 오빠가 있다는 걸 전제로 함
- **담화론 (Discourse)**
    - 대화나 긴 글 속에서 문장들의 연결성이나 일관성을 연구
    - **결속**: 글이나 대화에서 단어들이 의미적으로 어떻게 연결되는지를 분석
    - **일관성**: 단순히 단어들의 연결뿐만 아니라, 문장들이 논리적으로 통하는지를 파악하는 능력

---

### 언어학의 분류

| 분류 | '론' | 주요 연구 내용 |
| --- | --- | --- |
| **본질적 하위 분야** | **음운론** (Phonology) | 말소리의 규칙과 체계 |
|  | **형태론** (Morphology) | 단어와 형태소의 구조 |
|  | **통사론** (Syntax) | 문장 구성 규칙과 구조 |
|  | **의미론** (Semantics) | 단어와 문장의 의미 |
|  | **화용론** (Pragmatics) | 문맥에 따른 숨겨진 의미 |
|  | **담화론** (Discourse) | 문장 간의 연결과 일관성 |
| --- | --- | --- |
| **응용 및 융합 분야** | **사회언어학** (Sociolinguistics) | 언어와 사회의 관계 |
|  | **심리언어학** (Psycholinguistics) | 언어와 심리, 뇌의 관계 |
|  | **신경언어학** (Neurolinguistics) | 언어와 뇌 구조의 관계 |
|  | **코퍼스 언어학** (Corpus Linguistics) | 대규모 언어 자료(코퍼스) 연구 |

- **사회언어학 ↔ 심리언어학 ↔ 신경언어학**
    - 이 세 가지는 언어에 대한 이해를 **'사회 → 심리 → 뇌'**라는 단계로 심화시킨다.
    - **사회언어학**은 사회적 맥락(예: 세대별 유행어)이 언어 사용에 어떤 영향을 주는지 연구
    - **심리언어학**은 사회에서 사용되는 언어를 개인이 어떻게 배우고 이해하는지,                                         언어를 처리하는 심리적인 과정을 다룸
    - **신경언어학**은 그 심리적인 과정이 실제로 뇌의 어떤 물리적인 부분에서 일어나는지 밝혀냄
- **코퍼스 언어학**
    - 다른 세 분야와는 다른 위치에 있다. 코퍼스 언어학은 연구 **'방법'** 그 자체임
    - 사회언어학자가 세대별 유행어의 변화를 연구할 때, 수십 년간의 블로그나 SNS 코퍼스를 분석
    - 심리언어학자가 특정 감정을 표현하는 언어 패턴을 연구할 때, 영화 대본 코퍼스를 분석
    - 즉, 코퍼스 언어학은 다른 분야들이 이론을 세우고 검증할 때 **객관적인 증거 자료**를 제공하는 역할

결론, **사회언어학, 심리언어학, 신경언어학**은 **언어 현상의 원인**을 사회, 심리, 뇌라는 관점에서 파고드는 분야, **코퍼스 언어학**은 이 모든 연구를 **대규모 데이터**를 기반으로 가능하게 하는 **핵심 도구**

---

### 텍스트 전처리

컴퓨터가 텍스트를 제대로 이해하고 분석할 수 있도록 

쓸데없는 부분을 없애고 데이터를 정리하는 과정

### 주요 전처리 과정

- **토큰화**: 문장을 단어나 형태소 같이 더 작은 단위로 쪼개는 작업
    - **고려할 점**: 마침표 하나로 문장을 자르기 어렵고, 영어는 띄어쓰기만으로도 어느 정도 되지만 한국어는 조사 때문에 형태소 단위로 쪼개야 더 정확함
    - **추가 보충**: 한국어는 '아버지가 방에 들어가신다'라는 문장을 '아버지', '가', '방', '에', '들어가신다'처럼 의미를 가진 최소 단위인 **형태소**로 나눠야 '아버지'라는 단어를 정확히 인식할 수 있다.                       영어는 'I went to school'을 'I', 'went', 'to', 'school'처럼 띄어쓰기만으로도 충분히 의미를 파악할 수 있는 것과 다름

- **정제**: 토큰화 작업을 방해or 의미 없는 노이즈 제거하는 과정
    - **예**: HTML 태그, 특수문자, 이모티콘 없애고, 같은단어에 대소문자가 다른 경우 하나로 통일
    - **불용어**: '나', '너', '그리고'처럼 자주 나오지만 분석에 큰 의미가 없는 단어 제거
[O
- **정규화**: 단어의 형태를 통일하는 작업
    - **어간 추출**: 단어의 원형에서 접사(꼬리)를 떼어내고 어간(줄기)만 남기는 방법
        - **예시**: 'formalize', 'formal', 'formality'에서 모두 'formal'을 어간으로 남김
        - **추가 보충**: 이 방법은 단순하게 단어의 뒷부분을 잘라내는 식이라, 'formal'처럼 의미가 통하는 경우도 있지만 'studies'를 'studi'처럼 의미 없는 단어로 만들어버리기도 함
    - **표제어 추출**: 단어가 가진 품사 정보를 활용. 단어의 기본형을 찾아냄
        - **예시**: 'Cats' -> 'cat', 'watched' -> 'watch'처럼 원형을 찾기
        - **추가 보충**: 어간 추출보다 정확. 그러나 품사 정보가 필요해 더 복잡하고 시간이 걸림
[I        - 성능과 정확도가 중요한 최근에는 **표제어 추출**이 더 일반적인 방법
        - 데이터 양이 너무 많아 속도가 중요하거나 간단한 분석은 어간춫

- **편집거리**: 두 문자열이 얼마나 비슷한지 계산하는 방법
    
    **문자열 '사과'를 '바다'로 바꾸는 과정**
    
    - **1단계**: '사**과**' → '사**다**' (치환: '과'를 '다'로 바꿈)
    - **2단계**: '**사**다' → '**바**다' (치환: '사'를 '바'로 바꿈)
    
    이 과정을 보면, '사과'를 '바다'로 바꾸는 데 총 **2번의 치환** 작업이 필요. 따라서 둘의 편집거리는 **2**
    
    - 이때 작업은 삭제, 삽입, 치환 세 가지가 있다.

- **정규표현식 (Regex)**: 특정한 규칙을 가진 문자열을 찾거나 바꾸는 데 쓰는 형식 언어.                                  파이썬의 `re` 라이브러리로 사용
    - **전화번호 찾기**: `010-1234-5678` 같은 형식의 전화번호를 문서에서 모두 찾고 싶을 때
    - **이메일 주소 유효성 검사**: `abc@naver.com`처럼 `@` 기호와 `.com` 같은 형식이 제대로 있는지 확인
    - **특정 단어 치환**: '안녕'이라는 단어가 들어간 모든 문장에서 '안녕'을 '안녕하세요'로 바꾸고 싶을 때
    - 정규표현식은 이런 복잡한 작업을 효율적으로 할 수 있게 도와주는 도구

---

### 전처리 관련 라이브러리

- **KoNLPy**: 한국어 자연어처리를 위한 파이썬 라이브러리. 형태소 분석기를 제공
- **NLTK**: 영어 텍스트 처리를 위한 파이썬 라이브러리
- **Huggingface**:다양한 언어 모델들의 토큰화와 어휘 사전 지원

---

### 자연어 이해(NLU) 기반 하위 분야

네 가지 주요 분야

**형태소 분석기**

문장을 형태소와 품사로 나누는 작업

한국어는 '먹었다'가 '먹-'과 '-었-', '-다'로 나뉘는 것처럼 

어절 단위로 형태소가 나뉘지 않아서 영어보다 복잡함 

      **형태소 분석 방법** 

전문가가 직접 규칙을 만드는 **규칙 기반** 

데이터로 확률을 계산하는 **통계 기반**

인공 신경망을 활용해 스스로 학습하는 **딥러닝 기반** 까지 발전 HMM이나 CRF 모델 활용

**개체명 인식 (Named Entity Recognition, NER)**

텍스트에서 사람, 장소, 기관, 날짜 같은 '이름 있는' 고유 명사를 식별하는 기술

예) '춘향아, 8월 15일에 강남에서 홍길동과 약속이 있으니까, 늦지 말고 오도록 해!'라는 문장에서 

'춘향', '홍길동'(사람), '8월 15일'(날짜), '강남'(장소) 등을 찾아냄

실무에선 BIO 시스템(Begin-Inside-Outside)을 주로 사용

한국에선 한국정보통신기술협회(TTA)의 태그 셋이 보편적으로 사용

**정보 추출 (Information Extraction)**

비구조적인 문장에서 주어, 관계, 목적어로 이루어진 구조적인 트리플(triple)을 뽑아내는 기술

예) 'Barack Obama was born in Hawaii'라는 문장에서 

<Barack Obama, was born in, Hawaii>라는 트리플을 추출

규칙 기반과 기계학습 기반으로 나뉘는데, 기계학습 기반이 더 복잡한 패턴을 잘 찾아냄

**텍스트 분류 (Text Classification)**

문장이나 문서를 미리 정해진 범주로 나누거나 비슷한 것끼리 묶는 작업

감정 분석(Sentiment Analysis), 스팸메일 필터링 , 대화 의도 분류  등 다양한 분야에 활용

---

**최신 모델: 트랜스포머 (Transformer)**

HMM이나 CRF같은 모델은 전통적인 모델

현재는 트랜스포머 기반 모델들이 모든 자연어 처리 분야의 성능을 끌어올림

엄청나게 많은 데이터를 미리 학습, 원하는 작업에 맞춰 살짝만 추가 학습하면 아주 좋은 성능을 냄

실용적인 NLP 라이브러리

대부분의 작업은 직접 모델을 처음부터 만들지 않고 오픈 소스 라이브러리를 활용

**Hugging Face Transformers**는 트랜스포머 모델을 쉽게  수 있게 해주는 필수 라이브러리
**spaCy**는 NER이나 토큰화같은 기본 작업 빠르고 효율적으로 처리하는 데 유용
한국어 형태소 분석에는 **KoNLPy** 라이브러리가 유용

데이터의 중요성
AI 개발자로서 가장 중요한 건 결국 데이터
아무리 좋은 모델도 데이터가 부족하거나 질이 낮으면 성능down

특히 한국어는 영어보다 데이터셋이 적어 양질의 데이터확보와 전처리 작업이 아주 중요

---

### 자연어 생성(NLG)의 여러 하위 분야

**기계 번역**: 하나의 언어를 다른 언어로 바꾸는것

규칙 기반, 통계 기반, 가장 많이 쓰이는 **신경망 기반**으로 발전

**질의응답**: 질문에 맞는 답을 찾아주는 시스템. 

과거에는 문서에서 답을 찾는 방식이었지만, 요즘엔 딥러닝을 활용해 질문의 의도에 맞는 답을 직접 생성하거나 (대화형 질의응답) 이미지나 동영상을 보고 답을 찾는 방식(시각 질의응답)으로 발전하고 있어.

**대화 시스템**: 사람과 대화하는 시스템인데, 특정 목적을 가진 대화 시스템(예: 챗봇)과 그냥 일상 대화를 하는 시스템으로 나눌 수 있다.

**문서 요약**: 긴 글을 짧게 요약하는 기술. 

원본 문서의 문장을 그대로 가져와 요약하는 **추출 요약**과, 원본 내용을 바탕으로 새로운 문장을 만들어 요약하는 **추상적 요약**으로 나눈다.
